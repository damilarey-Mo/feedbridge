// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organization  Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  role          UserRole  @default(MEMBER)
  feedback      Feedback[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  feedback  Feedback[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Feedback {
  id             String        @id @default(cuid())
  title          String
  content        String
  status         FeedbackStatus @default(OPEN)
  priority       Priority      @default(MEDIUM)
  category       String
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum UserRole {
  ADMIN
  MEMBER
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
